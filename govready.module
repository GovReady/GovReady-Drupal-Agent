<?php

/**
 * @file
 * Code for the GovReady module.
 */

/**
 * GovReady configuration settings.
 */
function govready_config() {

  return array(
    'api_debug' => FALSE,
    'auth0' => array(
      'domain' => 'govready.auth0.com',
      'client_id' => 'HbYZO5QXKfgNshjKlhZGizskiaJH9kGH',
    ),
    'commercial' => FALSE,
    'govready_api_url' => 'https://plugin.govready.com/v1.0',
    'govready_client_url' => 'https://plugin.govready.com',
  );

}

/**
 * Implements hook_permission().
 */
function govready_permission() {

  return array(
    'view govready' => array(
      'title' => t('Access the GovReady dashboard'),
    ),
    'administer govready' => array(
      'title' => t('Set up and configure the GovReady dashboard'),
    ),
  );

}

/**
 * Implements hook_menu().
 */
function govready_menu() {

  $items['admin/reports/govready'] = array(
    'title' => 'GovReady Dashboard',
    'description' => 'A dasboard providing an overview of current hosting and security configuration with suggestions for government websites to achieve FISMA compliance.',
    'page callback' => 'govready_dashboard_callback',
    'page arguments' => array(),
    // @todo: what if user only has administer govready permission?
    'access arguments' => array('view govready'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['govready/api'] = array(
    'page callback' => 'govready_api_proxy',
    'page arguments' => array(),
    // @todo: what if user only has administer govready permission?
    'access arguments' => array('view govready'),
    'type' => MENU_CALLBACK,
  );

  $items['govready/refresh-token'] = array(
    'page callback' => 'govready_refresh_token',
    'page arguments' => array(),
    // @todo: what if user only has administer govready permission?
    'access arguments' => array('view govready'),
    'type' => MENU_CALLBACK,
  );

  $items['govready/trigger'] = array(
    'page callback' => 'govready_trigger_callback',
    'page arguments' => array(),
    'access callback' => TRUE,
    // 'access arguments' => array('view govready'),.
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/**
 * Page callback for the GovReady Dashboard.
 */
function govready_dashboard_callback() {

  module_load_include('class.php', 'govready', 'lib/govready-dashboard');
  $dashboard = new GovreadyDashboard();
  return $dashboard->dashboardPage();

}

/**
 * Call the GovReady Agent trigger.
 */
function govready_trigger_callback() {

  module_load_include('class.php', 'govready', 'lib/govready-agent');
  $agent = new GovreadyAgent();
  return $agent->ping();

}

/**
 * Make a request to the GovReady API.
 */
function govready_api($endpoint, $method = 'GET', $data = array(), $anonymous = FALSE) {

  $config = govready_config();
  $url = $config['govready_api_url'] . $endpoint;

  // Make sure our token is a-ok.
  $token = variable_get('govready_token', array());

  if (!$anonymous && (empty($token['id_token']) || empty($token['endoflife']) || $token['endoflife'] < time())) {
    $token = govready_refresh_token(TRUE);
  }
  $token = !$anonymous && !empty($token['id_token']) ? $token['id_token'] : FALSE;

  // Make the API request with cURL.
  // @todo should we support HTTP_request (https://pear.php.net/manual/en/package.http.http-request.intro.php)?
  $headers = array('Content-Type: application/json');
  if ($token) {
    array_push($headers, 'Authorization: Bearer ' . $token);
  }
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $method);
  if ($data) {
    curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($data));
  }
  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);

  // Only for debugging.
  if (!empty($config['api_debug']) && $config['api_debug']) {
    print_r($method .' '. $url);
  }

  $response = curl_exec($curl);
  curl_close($curl);

  // Only for debugging.
  if (!empty($config['api_debug']) && $config['api_debug']) {
    print_r($data);
    print_r($response);
  }

  // We need to save the siteId in the Drupal govready_options variable if this is a new site.
  if ($method == 'POST' && $endpoint == '/sites') {
    $options = variable_get('govready_options', array());
    $options['siteId'] = $response['_id'];
    variable_set('govready_options', $options);
  }

  $response = json_decode($response, TRUE);

  return $response;

}

/**
 * Refresh the access token.
 */
function govready_refresh_token($return = FALSE) {

  // @todo: nonce this call
  $options = variable_get('govready_options');
  if (!empty($_REQUEST['refresh_token']) && $_REQUEST['refresh_token']) {
    $token = $_REQUEST['refresh_token'];
    $options['refresh_token'] = $token;
    variable_set('govready_options', $options);
  }
  else {
    $token = !empty($options['refresh_token']) ? $options['refresh_token'] : '';
  }

  $response = govready_api('/refresh-token', 'POST', array('refresh_token' => $token), TRUE);
  $response['endoflife'] = time() + (int) $response['expires_in'];
  variable_set('govready_token', $response);

  if ($return) {
    return $response;
  }
  else {
    drupal_json_output($response);
  }

}

/**
 * Call the GovReady API.
 */
function govready_api_proxy() {

  $method = !empty($_REQUEST['method']) ? $_REQUEST['method'] : $_SERVER['REQUEST_METHOD'];
  $response = govready_api($_REQUEST['endpoint'], $method, $_REQUEST);
  drupal_json_output($response);

}

/**
 * Implements hook_theme().
 */
function govready_theme() {

  $path = drupal_get_path('module', 'govready');
  $variables = array(
    'logo' => url($path . '/images/logo.png'),
    'path' => '',
  );

  return array(
    'govready_connect' => array(
      'template' => 'templates/govready-connect',
      'variables' => $variables,
    ),
    'govready_dashboard' => array(
      'template' => 'templates/govready-dashboard',
      'variables' => $variables,
    ),
  );

}
